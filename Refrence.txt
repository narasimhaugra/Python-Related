import cv2
from cvzone.HandTrackingModule import HandDetector
import cvzone
import numpy as np

cap = cv2.VideoCapture(2)
cap.set(3, 1280)
cap.set(4, 720)
detector = HandDetector(detectionCon=0.8)
colorR = (255, 0, 255)

cx, cy, w, h = 100, 100, 200, 200


class DragRect():
    def __init__(self, posCenter, size=[200, 200]):
        self.posCenter = posCenter
        self.size = size

    def update(self, cursor):
        cx, cy = self.posCenter
        w, h = self.size

        # If the index finger tip is in the rectangle region
        if cx - w // 2 < cursor[0] < cx + w // 2 and \
                cy - h // 2 < cursor[1] < cy + h // 2:
            self.posCenter = cursor


rectList = []
for x in range(5):
    rectList.append(DragRect([x * 250 + 150, 150]))

while True:
    success, img = cap.read()
    img = cv2.flip(img, 1)
    img = detector.findHands(img)
    lmList, _ = detector.findPosition(img)

    if lmList:

        l, _, _ = detector.findDistance(8, 12, img, draw=False)
        print(l)
        if l < 30:
            cursor = lmList[8]  # index finger tip landmark
            # call the update here
            for rect in rectList:
                rect.update(cursor)

    ## Draw solid
    # for rect in rectList:
    #     cx, cy = rect.posCenter
    #     w, h = rect.size
    #     cv2.rectangle(img, (cx - w // 2, cy - h // 2),
    #                   (cx + w // 2, cy + h // 2), colorR, cv2.FILLED)
    #     cvzone.cornerRect(img, (cx - w // 2, cy - h // 2, w, h), 20, rt=0)

    ## Draw Transperency
    imgNew = np.zeros_like(img, np.uint8)
    for rect in rectList:
        cx, cy = rect.posCenter
        w, h = rect.size
        cv2.rectangle(imgNew, (cx - w // 2, cy - h // 2),
                      (cx + w // 2, cy + h // 2), colorR, cv2.FILLED)
        cvzone.cornerRect(imgNew, (cx - w // 2, cy - h // 2, w, h), 20, rt=0)

    out = img.copy()
    alpha = 0.5
    mask = imgNew.astype(bool)
    out[mask] = cv2.addWeighted(img, alpha, imgNew, 1 - alpha, 0)[mask]

    cv2.imshow("Image", out)
    cv2.waitKey(1)
	
	
What is the height in an HD Image?
How many corners does a hexagon have?
What is the variable type of a? a = 'yes'
How many oceans are in the world?
What is the height in an HD Image?
How many corners does a hexagon have?
What is the variable type of a? a = 'yes'
How many oceans are in the world?

        
		
pip install opencv-python==4.5.1.48

XNNPACK is a highly optimized library of neural network inference operators for ARM, X86, and Web 
assembly architectures in Android, iOS, WIndows,linux, macos, and emscripten environments.




https://stackoverflow.com/questions/71092717/opencv-python-valueerror-too-many-values-to-unpack-img


https://stackoverflow.com/questions/69296432/cant-find-findposition-attributeerror-handdetector-object-has-no-attribute

cvzone from 1.6.1 to 1.4.1

This is used in the previous mediapipe hands file.
self.hands = self.mpHands.Hands(self.mode, self.maxHands,self.detectionCon, self.trackCon)
In the new version the model complexity attribute is added
so try using
def init(self, mode=False, maxHands=2,modelC=1, detectionCon=0.5, trackCon=0.5):
self.mode = mode
self.maxHands = maxHands
self.modelC = modelC
self.detectionCon = detectionCon
self.trackCon = trackCon

    self.mpHands = mp.solutions.hands
    self.hands = self.mpHands.Hands(self.mode, self.maxHands,self.modelC, self.detectionCon, self.trackCon)
    self.mpDraw = mp.solutions.drawing_utils
instead of
def init(self, mode=False, maxHands=2, detectionCon=0.5, trackCon=0.5):
self.mode = mode
self.maxHands = maxHands
self.detectionCon = detectionCon
self.trackCon = trackCon

self.mpHands = mp.solutions.hands
self.hands = self.mpHands.Hands(self.mode, self.maxHands,self.detectionCon, self.trackCon)
self.mpDraw = mp.solutions.drawing_utils

OpenCV: OpenCV is a widely used library for image processing. 
cvzone: It is a computer vision package that makes it easy to run 
Image processing and AI functions.

convert .py to .exe
pyinstaller --onefile [filename.py]
        
        